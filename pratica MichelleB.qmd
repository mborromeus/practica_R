---
title: "practica MichelleB"
format: html
editor: visual
---

---
title: "practica_final"
format: html
editor: visual
---

Vamos a utilizar el dataset de semillas que se encuentra aquí: <https://archive.ics.uci.edu/ml/datasets/seeds#>

Primero vamos a descargarnos el dataset con el siguiente comando:

```{r}
library(tidyverse)
df_seeds <- read.table('https://archive.ics.uci.edu/ml/machine-learning-databases/00236/seeds_dataset.txt', col.names =c('area','perimetro','compacto','longitud','anchura','coeficient.asimetria','longitud.ranura','tipo'))
```

#### PREGUNTA 1 (0.5pt)

¿Cuantas filas y cuantas columnas tiene el dataframe df_seeds?

**Respuesta**:

```{r}
dimensiones <- dim(df_seeds)
num_filas <- dimensiones[1]
num_columnas <- dimensiones[2]

#imprimir
paste("El dataframe df_seeds tiene", dimensiones[1], "filas y", dimensiones[2], "columnas.")
```

#### PREGUNTA 2 (0.5pt)

Vamos a convertir en factor la columna tipo. Vamos a reemplazar los números por su correspondiente etiqueta (label). La correspondencia entre el código y el tipo es:

-   1 - Kama
-   2 - Rosa
-   3 - Canadian

Convierte en factor la columna tipo, respetando las etiquetas:

**Respuesta**:

```{r}
df_seeds$tipo <- factor(df_seeds$tipo, 
                        levels = c(1, 2, 3), 
                        labels = c('Kama', 'Rosa', 'Canadian'))
paste(df_seeds$tipo)
```

#### PREGUNTA 3 (1pt)

¿Cual es la media del area de cada uno de los tipos?

**Respuesta**

```{r}
media_area_por_tipo <- aggregate(area ~ tipo, data = df_seeds, FUN = mean)

media_area_por_tipo
```

#### PREGUNTA 4 (0.5pt)

¿Como se llama el siguiente tipo de gráfico?. ¿Qué representa la línea del centro de la caja?

```{r}
ggplot(df_seeds, aes(x=tipo, y=area)) + geom_boxplot()
```

**Respuesta**: 'Diagrama de caja o Boxplot. La linea del centro representa la mediana.'

#### PREGUNTA 5 (1.5pt)

¿Como pintarías un diagrama de puntos (o scatterplot) con ggplot con las siguientes características? - En el eje X la variable compacto - En el eje Y la variable area - Cada tipo de semilla debería tener un color diferente

**Respuesta**:

```{r}
#cargar gg
library(ggplot2)

ggplot(df_seeds, aes(x = compacto, y = area, color = tipo)) +
  geom_point() + ggtitle(" Diagrama de area x compacidad semillas")
  scale_color_manual(values = c("Kama" = "red", "Rosa" = "green", "Canadian" = "blue"))
```

#### PREGUNTA 6 (0.5pt)

¿Qué hace la siguiente línea?:

```{r}
df_seeds |> mutate(is_kama = tipo=='Kama') -> df_seeds
```

**Respuesta**: 'Ese codigo es usado para filtrar filas(l\>). Revisando (mutate) cada semilla, se la semilla for del tipo 'kama' la marca como 'sí', y se no es como 'no'. Al final, tenemos un nueva lista que nos dice cuáles semillas son 'kama' y cuáles no.'

#### PREGUNTA 7 (1.5pt)

Vamos a dividir el conjunto de datos en test y training porque vamos a entrenar un modelo que me permita diferenciar si una semilla es de tipo Kama o no. ¿Por qué es aconsejable dividir el dataset en los grupos de train y test?

```{r}
set.seed(123) # Este set.seed hace que a todos nos generen los mismos número aleatorios
idx <- sample(1:nrow(df_seeds), 0.7*nrow(df_seeds))
df_seeds_train <- df_seeds[idx,]
df_seeds_test <- df_seeds[-idx,]
```

**Respuesta**: 'Dividir los dados nos ayuda a entrenar los modelos (conjunto de entranamiento-train) con una muestraje; y luego probar el modelo (conjunto de prueba-test) verificando que tambien funciona con nuevos ejemplos (el grupo 2 del dataset) y aseguramos que el modelo realmente aprenda a reconocer las diferencias en situaciones reales (evitar el sobreajuste).'

#### PREGUNTA 8 (1pt)

Vamos a crear un modelo para realizar una clasificación binaria, donde le pasaremos como entrada las columnas: area, perimetro, compacto, longitud, coeficient.asimetria y longitud.ranura

¿Qué tipo de algoritmo o modelo debería usar?

**Respuesta**: 'Regresión Logística;'

#### PREGUNTA 9 (1pt)

Crea un modelo que me permita clasificar si una semilla es de tipo Kama o no con las siguientes columnas: area, perimetro, compacto, longitud, coeficient.asimetria, longitud.ranura

**Respuesta**:

```{r}
modelo_tr <- glm(df_seeds_train, formula = is_kama ~ area + perimetro + compacto + longitud + coeficient.asimetria + longitud.ranura, family = binomial)

summary(modelo_tr)


```

#### PREGUNTA 10 (1pt)

Si usamos un umbral de 0 en la salida del modelo (lo que equivale a probabilidad de 0.5 cuando usamos el predict con type='response') ¿Cuales son los valores de precisión y exhausitividad?

**Respuesta**.

```{r}
precision <- predict(modelo_tr, newdata = df_seeds_test, type = "response")
#argumento
predicciones_clasificadas <- ifelse(precision > 0.5, "TRUE", "FALSE")
#precision
precision <- sum(predicciones_clasificadas == df_seeds_test$is_kama & predicciones_clasificadas == "TRUE") / sum(predicciones_clasificadas == "TRUE")
#exhaustividad
exhaustividad <- sum(predicciones_clasificadas == "TRUE" & df_seeds_test$is_kama == "TRUE") / sum(df_seeds_test$is_kama == "TRUE")
#resultado
precision
exhaustividad
```

#### PREGUNTA 11 (1.5pt)

¿Qué están haciendo las siguientes líneas?

```{r}
set.seed(123)
cl<-df_seeds |> select(area,perimetro,compacto,longitud,anchura,coeficient.asimetria,longitud.ranura) |> kmeans(3)
table(real=df_seeds$tipo,cluster=cl$cluster)
```

**Respuesta**: 'linea 1: set.seed(123) = define el padron de como empezar o ejecutar la analise. Así, el mismo trabajo será hecho de la misma manera por cualquier uno.

linea 2: cl\<-df_seeds \|\> select(area,perimetro,compacto,longitud,anchura,coeficient.asimetria,longitud.ranura) \|\> kmeans(3)

cl= la lista que va ser criada; df_seeds = es el dataframe;

\|\> = el operador tuberia que pasar el dataframe a funcion

select()= que elige las columnas (caracteristicas) especificadas entre parentesis;

Después de selecionadas las columnas se aplica \|\> = el operador tuberia para pasar la seleccion a función

Kmeans () =funciona como un algoritmo agrupando los dados por caracteristicas comunes en ese caso fueran 3 = grupos o clusters el numero identificado entre perentesis.

linea 3: table(real=df_seeds$tipo,cluster=cl$cluster)

table= crear una tabla de contigencia

real=df_seeds\$tipo = diz respeto a los grupos reales de semillas

luster=cl\$cluster = Los grupos creados por el algoritmo Kmeans

aqui se compara el algoritmo con la realidad, ratificando la selecion de los 3 grupos.'
